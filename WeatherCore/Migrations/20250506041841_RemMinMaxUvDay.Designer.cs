// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherCore;

#nullable disable

namespace WeatherCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250506041841_RemMinMaxUvDay")]
    partial class RemMinMaxUvDay
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("WeatherCore.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("WeatherCore.DayWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Aqi")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Day")
                        .HasColumnType("datetime(6)");

                    b.Property<double>("Humility")
                        .HasColumnType("double");

                    b.Property<double>("Temp_max")
                        .HasColumnType("double");

                    b.Property<double>("Temp_min")
                        .HasColumnType("double");

                    b.Property<double>("Uv")
                        .HasColumnType("double");

                    b.Property<double>("Wind")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Days");
                });

            modelBuilder.Entity("WeatherCore.HourWeather", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<string>("condition")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<double>("cur_temp")
                        .HasColumnType("double");

                    b.Property<DateTime>("hour")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Hours");
                });

            modelBuilder.Entity("WeatherCore.DayWeather", b =>
                {
                    b.HasOne("WeatherCore.City", "City")
                        .WithMany("Weather")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("WeatherCore.HourWeather", b =>
                {
                    b.HasOne("WeatherCore.DayWeather", "Day")
                        .WithMany("hourlyWeathers")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("WeatherCore.City", b =>
                {
                    b.Navigation("Weather");
                });

            modelBuilder.Entity("WeatherCore.DayWeather", b =>
                {
                    b.Navigation("hourlyWeathers");
                });
#pragma warning restore 612, 618
        }
    }
}
